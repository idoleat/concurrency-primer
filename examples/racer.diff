4c4
< #include <threads.h>
---
> #include <pthread.h>
19c19
<     _Atomic(job_t *) prev;
---
>     job_t* prev;
29c29
<     thrd_t *pool;
---
>     pthread_t *pool;
31c31
<     thrd_start_t func;
---
>     void *(*func)(void *);
36c36
< int worker(void *args)
---
> void *worker(void *args)
39c39
<         return EXIT_FAILURE;
---
>         return NULL;
44c44
<             return EXIT_SUCCESS;
---
>             return NULL;
47,50c47,48
<             job_t *job = atomic_load(&thrd_pool->head->prev);
<             while (!atomic_compare_exchange_strong(&thrd_pool->head->prev, &job,
<                                                    job->prev)) {
<             }
---
>             job_t *job = thrd_pool->head->prev;
>             thrd_pool->head->prev = job->prev;
61c59
<             thrd_yield();
---
>             sched_yield();
75c73
<     thrd_pool->pool = malloc(sizeof(thrd_t) * size);
---
>     thrd_pool->pool = malloc(sizeof(pthread_t) * size);
98c96
<         thrd_create(thrd_pool->pool + i, worker, thrd_pool);
---
>         pthread_create(thrd_pool->pool + i, NULL, worker, thrd_pool);
110c108
<         thrd_join(thrd_pool->pool[i], NULL);
---
>         pthread_join(thrd_pool->pool[i], NULL);
